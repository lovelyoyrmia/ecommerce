// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: order.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    oid,
    uid,
    order_status,
    total_amount
) VALUES (
    $1, $2, $3, $4
) RETURNING id, oid, uid, total_amount, order_status, ordered_at
`

type CreateOrderParams struct {
	Oid         string `json:"oid"`
	Uid         string `json:"uid"`
	OrderStatus int32  `json:"order_status"`
	TotalAmount int32  `json:"total_amount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.Oid,
		arg.Uid,
		arg.OrderStatus,
		arg.TotalAmount,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Oid,
		&i.Uid,
		&i.TotalAmount,
		&i.OrderStatus,
		&i.OrderedAt,
	)
	return i, err
}

const createOrderItems = `-- name: CreateOrderItems :exec
INSERT INTO order_items (
    oid,
    pid,
    quantity,
    amount
) VALUES (
    $1, $2, $3, $4
)
`

type CreateOrderItemsParams struct {
	Oid      string `json:"oid"`
	Pid      string `json:"pid"`
	Quantity int32  `json:"quantity"`
	Amount   int32  `json:"amount"`
}

func (q *Queries) CreateOrderItems(ctx context.Context, arg CreateOrderItemsParams) error {
	_, err := q.db.Exec(ctx, createOrderItems,
		arg.Oid,
		arg.Pid,
		arg.Quantity,
		arg.Amount,
	)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders as O
WHERE EXISTS (
    SELECT oid FROM order_items
    WHERE O.oid = oid
)
`

func (q *Queries) DeleteOrder(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteOrder)
	return err
}

const deleteOrderItemByProduct = `-- name: DeleteOrderItemByProduct :exec
DELETE FROM order_items
WHERE pid = $1
`

func (q *Queries) DeleteOrderItemByProduct(ctx context.Context, pid string) error {
	_, err := q.db.Exec(ctx, deleteOrderItemByProduct, pid)
	return err
}

const deleteOrderItems = `-- name: DeleteOrderItems :exec
DELETE FROM order_items 
WHERE oid = $1 AND pid = $2 AND order_status <> 0
`

type DeleteOrderItemsParams struct {
	Oid string `json:"oid"`
	Pid string `json:"pid"`
}

func (q *Queries) DeleteOrderItems(ctx context.Context, arg DeleteOrderItemsParams) error {
	_, err := q.db.Exec(ctx, deleteOrderItems, arg.Oid, arg.Pid)
	return err
}

const getCart = `-- name: GetCart :many
SELECT 
    oid, uid, total_amount, ordered_at
FROM orders
WHERE uid = $1 AND order_status = 0
LIMIT $2
OFFSET $3
`

type GetCartParams struct {
	Uid    string `json:"uid"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetCartRow struct {
	Oid         string           `json:"oid"`
	Uid         string           `json:"uid"`
	TotalAmount int32            `json:"total_amount"`
	OrderedAt   pgtype.Timestamp `json:"ordered_at"`
}

func (q *Queries) GetCart(ctx context.Context, arg GetCartParams) ([]GetCartRow, error) {
	rows, err := q.db.Query(ctx, getCart, arg.Uid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartRow{}
	for rows.Next() {
		var i GetCartRow
		if err := rows.Scan(
			&i.Oid,
			&i.Uid,
			&i.TotalAmount,
			&i.OrderedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartProducts = `-- name: GetCartProducts :many
SELECT 
    oid, pid, quantity, amount
FROM order_items
WHERE oid = $1
`

type GetCartProductsRow struct {
	Oid      string `json:"oid"`
	Pid      string `json:"pid"`
	Quantity int32  `json:"quantity"`
	Amount   int32  `json:"amount"`
}

func (q *Queries) GetCartProducts(ctx context.Context, oid string) ([]GetCartProductsRow, error) {
	rows, err := q.db.Query(ctx, getCartProducts, oid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartProductsRow{}
	for rows.Next() {
		var i GetCartProductsRow
		if err := rows.Scan(
			&i.Oid,
			&i.Pid,
			&i.Quantity,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartUser = `-- name: GetCartUser :one
SELECT 
    oid, uid, total_amount, ordered_at
FROM orders
WHERE uid = $1 AND order_status = 0
LIMIT 1
`

type GetCartUserRow struct {
	Oid         string           `json:"oid"`
	Uid         string           `json:"uid"`
	TotalAmount int32            `json:"total_amount"`
	OrderedAt   pgtype.Timestamp `json:"ordered_at"`
}

func (q *Queries) GetCartUser(ctx context.Context, uid string) (GetCartUserRow, error) {
	row := q.db.QueryRow(ctx, getCartUser, uid)
	var i GetCartUserRow
	err := row.Scan(
		&i.Oid,
		&i.Uid,
		&i.TotalAmount,
		&i.OrderedAt,
	)
	return i, err
}

const getOrderDetails = `-- name: GetOrderDetails :one
SELECT 
    oid, uid, total_amount, ordered_at
FROM orders
WHERE oid = $1
`

type GetOrderDetailsRow struct {
	Oid         string           `json:"oid"`
	Uid         string           `json:"uid"`
	TotalAmount int32            `json:"total_amount"`
	OrderedAt   pgtype.Timestamp `json:"ordered_at"`
}

func (q *Queries) GetOrderDetails(ctx context.Context, oid string) (GetOrderDetailsRow, error) {
	row := q.db.QueryRow(ctx, getOrderDetails, oid)
	var i GetOrderDetailsRow
	err := row.Scan(
		&i.Oid,
		&i.Uid,
		&i.TotalAmount,
		&i.OrderedAt,
	)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT
    order_items.oid, products.pid, products.name, 
    products.price, products.stock, 
    order_items.quantity, order_items.amount
FROM order_items
LEFT JOIN products
ON order_items.pid = products.pid
WHERE order_items.oid = $1
LIMIT $2
OFFSET $3
`

type GetOrderItemsParams struct {
	Oid    string `json:"oid"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetOrderItemsRow struct {
	Oid      string      `json:"oid"`
	Pid      pgtype.Text `json:"pid"`
	Name     pgtype.Text `json:"name"`
	Price    pgtype.Int4 `json:"price"`
	Stock    pgtype.Int4 `json:"stock"`
	Quantity int32       `json:"quantity"`
	Amount   int32       `json:"amount"`
}

func (q *Queries) GetOrderItems(ctx context.Context, arg GetOrderItemsParams) ([]GetOrderItemsRow, error) {
	rows, err := q.db.Query(ctx, getOrderItems, arg.Oid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrderItemsRow{}
	for rows.Next() {
		var i GetOrderItemsRow
		if err := rows.Scan(
			&i.Oid,
			&i.Pid,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Quantity,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCart = `-- name: UpdateCart :exec
UPDATE orders
SET
    total_amount = $1
WHERE oid = $2
`

type UpdateCartParams struct {
	TotalAmount int32  `json:"total_amount"`
	Oid         string `json:"oid"`
}

func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) error {
	_, err := q.db.Exec(ctx, updateCart, arg.TotalAmount, arg.Oid)
	return err
}
