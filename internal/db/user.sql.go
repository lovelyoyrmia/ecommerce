// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    uid,
    email,
    first_name,
    last_name,
    password
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, uid, email, first_name, last_name, password, date_joined
`

type CreateUserParams struct {
	Uid       string      `json:"uid"`
	Email     string      `json:"email"`
	FirstName string      `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Password  string      `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Uid,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.DateJoined,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT 
    uid, first_name, last_name, email, password
FROM users
WHERE 
    email = $1 
LIMIT 1
`

type GetUserRow struct {
	Uid       string      `json:"uid"`
	FirstName string      `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Email     string      `json:"email"`
	Password  string      `json:"password"`
}

func (q *Queries) GetUser(ctx context.Context, email string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i GetUserRow
	err := row.Scan(
		&i.Uid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
	)
	return i, err
}
