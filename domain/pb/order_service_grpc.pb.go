// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: order_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_AddCart_FullMethodName           = "/pb.OrderService/AddCart"
	OrderService_GetCarts_FullMethodName          = "/pb.OrderService/GetCarts"
	OrderService_DeleteCartProduct_FullMethodName = "/pb.OrderService/DeleteCartProduct"
	OrderService_CheckoutOrder_FullMethodName     = "/pb.OrderService/CheckoutOrder"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	AddCart(ctx context.Context, in *CreateCartParams, opts ...grpc.CallOption) (*CreateCartResponse, error)
	GetCarts(ctx context.Context, in *GetCartUserParams, opts ...grpc.CallOption) (*GetCartUserResponse, error)
	DeleteCartProduct(ctx context.Context, in *DeleteCartProductParams, opts ...grpc.CallOption) (*DeleteCartProductResponse, error)
	CheckoutOrder(ctx context.Context, in *GetCartUserParams, opts ...grpc.CallOption) (*CheckoutResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) AddCart(ctx context.Context, in *CreateCartParams, opts ...grpc.CallOption) (*CreateCartResponse, error) {
	out := new(CreateCartResponse)
	err := c.cc.Invoke(ctx, OrderService_AddCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetCarts(ctx context.Context, in *GetCartUserParams, opts ...grpc.CallOption) (*GetCartUserResponse, error) {
	out := new(GetCartUserResponse)
	err := c.cc.Invoke(ctx, OrderService_GetCarts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DeleteCartProduct(ctx context.Context, in *DeleteCartProductParams, opts ...grpc.CallOption) (*DeleteCartProductResponse, error) {
	out := new(DeleteCartProductResponse)
	err := c.cc.Invoke(ctx, OrderService_DeleteCartProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CheckoutOrder(ctx context.Context, in *GetCartUserParams, opts ...grpc.CallOption) (*CheckoutResponse, error) {
	out := new(CheckoutResponse)
	err := c.cc.Invoke(ctx, OrderService_CheckoutOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	AddCart(context.Context, *CreateCartParams) (*CreateCartResponse, error)
	GetCarts(context.Context, *GetCartUserParams) (*GetCartUserResponse, error)
	DeleteCartProduct(context.Context, *DeleteCartProductParams) (*DeleteCartProductResponse, error)
	CheckoutOrder(context.Context, *GetCartUserParams) (*CheckoutResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) AddCart(context.Context, *CreateCartParams) (*CreateCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCart not implemented")
}
func (UnimplementedOrderServiceServer) GetCarts(context.Context, *GetCartUserParams) (*GetCartUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarts not implemented")
}
func (UnimplementedOrderServiceServer) DeleteCartProduct(context.Context, *DeleteCartProductParams) (*DeleteCartProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCartProduct not implemented")
}
func (UnimplementedOrderServiceServer) CheckoutOrder(context.Context, *GetCartUserParams) (*CheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_AddCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_AddCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddCart(ctx, req.(*CreateCartParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartUserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetCarts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetCarts(ctx, req.(*GetCartUserParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DeleteCartProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartProductParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DeleteCartProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_DeleteCartProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DeleteCartProduct(ctx, req.(*DeleteCartProductParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CheckoutOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartUserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CheckoutOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CheckoutOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CheckoutOrder(ctx, req.(*GetCartUserParams))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCart",
			Handler:    _OrderService_AddCart_Handler,
		},
		{
			MethodName: "GetCarts",
			Handler:    _OrderService_GetCarts_Handler,
		},
		{
			MethodName: "DeleteCartProduct",
			Handler:    _OrderService_DeleteCartProduct_Handler,
		},
		{
			MethodName: "CheckoutOrder",
			Handler:    _OrderService_CheckoutOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_service.proto",
}
